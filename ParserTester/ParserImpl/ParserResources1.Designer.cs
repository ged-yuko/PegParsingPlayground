//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ParserImpl {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class ParserResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ParserResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ParserImpl.ParserResources", typeof(ParserResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [RootRule(listing)]
        ///[FileExtension(&apos;.asm&apos;)]
        ///[OmitPattern(&quot;[\s]+&quot;)]
        ///Asm {
        ///
        ///	name: &quot;[a-zA-Z_][a-zA-Z_0-9]*&quot;;
        ///	number: &quot;[0-9]+&quot;;
        ///	hex: &quot;0x[a-fA-F0-9]+&quot;;
        ///	complexName: name (&apos;.&apos; name)*;
        ///
        ///    listing: segdef*;
        ///
        ///    segdef: &apos;segment&apos; name bitwise &apos;\n&apos; content &apos;endseg&apos; {
        ///        bitwise: {
        ///            |bits16: &apos;bits16&apos;;
        ///            |bits32: &apos;bits32&apos;;
        ///        };
        ///    };
        ///
        ///    content: (clabel centry)* {
        ///        centry: {
        ///            |instruction: mnemonic args {
        ///                #mnemonic: name;        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string AssemblerGrammar {
            get {
                return ResourceManager.GetString("AssemblerGrammar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [OmitPattern(&quot;[\s]*&quot;)]
        ///[RootRule(expr)]
        ///SimpleArithmetics {
        ///	num: &quot;[0-9]+&quot;;
        ///	#braces: &apos;(&apos; expr &apos;)&apos;;
        ///
        ///	#parg: braces | num;
        ///	product: parg (productOp parg)+;
        ///	productOp: &apos;*&apos; | &apos;/&apos;;
        ///
        ///	#sarg: product | braces | num;
        ///	sum: sarg (sumOp sarg)+;
        ///	sumOp: &apos;+&apos; | &apos;-&apos;;
        ///
        ///	#expr: sum | product | braces | num;
        ///}
        ///.
        /// </summary>
        public static string CalcGrammar {
            get {
                return ResourceManager.GetString("CalcGrammar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [OmitPattern(&quot;[\s]*&quot;)]
        ///[RootRule(expr)]
        ///SimpleArithmetics {
        ///
        ///	productOp: &apos;*&apos; | &apos;/&apos;;
        ///	sumOp: &apos;+&apos; | &apos;-&apos;;
        ///
        ///	[RewriteRecursion]
        ///	/*[ExpandRecursion]*/
        ///	#expr: {
        ///		|sum: expr sumOp expr;
        ///		|product: expr productOp expr;
        ///		|[right]power: expr &apos;^&apos; expr;
        ///		|#braces: &apos;(&apos; expr &apos;)&apos;;
        ///		|num: &quot;[0-9]+&quot;;
        ///	};
        ///}
        ///.
        /// </summary>
        public static string CalcGrammarNew {
            get {
                return ResourceManager.GetString("CalcGrammarNew", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///!default {
        ///	color: #000000;
        ///	background: #ffffff;
        ///}
        ///
        ///num {
        ///	color: #0000ff;
        ///}
        ///
        ///sumOp, productOp {
        ///	color: #008800;
        ///}
        ///
        ////braces, braces/braces {
        ///	color: #888888;
        ///}
        ///
        ///braces {
        ///	background: #00ffff;
        ///}
        ///
        ///
        ///.
        /// </summary>
        public static string CalcHighlighting {
            get {
                return ResourceManager.GetString("CalcHighlighting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [OmitPattern(commentsAndSpaces)]
        ///[RootRule(coloringRules)]
        ///ColoringSchema {
        ///
        ////*
        ///	VSPlugin pre-build
        ///
        ///	attrib -R $(ProjectDir)Impl2\HighlightingEngine\HighlightingTextModel.cs 
        ///	$(SolutionDir)Portable.Parser.TextModelGenerator\$(OutDir)Portable.Parser.TextModelGenerator.exe $(SolutionDir)Portable.Parser\Definitions\coloring.pdsl $(ProjectDir)Impl2\HighlightingEngine\HighlightingTextModel.cs Portable.Parser.VSPlugin.Impl2.HighlightingEngine
        ///*/
        ///	commentsAndSpaces: &quot;([\s]*)(/\*(?&gt;(?:(?&gt;[^*]+)|\*(?!/)) [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ColoringSchemaGrammar {
            get {
                return ResourceManager.GetString("ColoringSchemaGrammar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [OmitPattern(commentsAndSpaces)]
        ///[RootRule(ruleSet.body)]
        ///GrammarDefinition { 
        ///	
        ///	commentsAndSpaces: &quot;([\s]*)(/\*(?&gt;(?:(?&gt;[^*]+)|\*(?!/))*)\*/[\s]*)*&quot;;
        ///
        ///	name: &quot;[a-zA-Z_][a-zA-Z_0-9]*&quot;;
        ///	number: &quot;[0-9]+&quot;;
        ///	hex: &quot;0x[a-fA-F0-9]+&quot;;
        ///	complexName: name (&apos;.&apos; name)*;
        ///
        ///	attributes: attributesCollection* {
        ///		attributeUsageArgList: (&apos;(&apos; expr (&apos;,&apos; expr)* &apos;)&apos;)?;
        ///		attributeUsage: complexName attributeUsageArgList;
        ///		attributesCollection: &apos;[&apos; attributeUsage (&apos;,&apos; attributeUsage)* &apos;]&apos;;
        ///	};
        ///
        ///	expr: {
        ///		|# [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DefinitionGrammar {
            get {
                return ResourceManager.GetString("DefinitionGrammar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [RootRule(sequence)]
        ///RegexDefinition { 
        ///	
        ///	/* regular expressions subset grammar for parsing it to FSM model */
        ///	
        ///	sequence: item*;
        ///	
        ///	item: {
        ///		|#simple: {
        ///			/* |condition: &apos;(?(&apos; sequence &apos;)&apos; sequence &apos;|&apos; sequence &apos;)&apos;; */
        ///			|group: &apos;(&apos; sequence &apos;)&apos;;
        ///			|class: &apos;[&apos; inverted? charClassBody &apos;]&apos; {
        ///				inverted: &apos;^&apos;;
        ///			 };
        ///		 };
        ///		|#complex: {
        ///			|sequence: sitem sitem+ { 
        ///				sitem: alternatives | repeat | simple;
        ///			 };
        ///			|alternatives: aitem (&apos;|&apos; aitem)+ { 
        ///				aitem: repeat | simple; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string RegexGrammar {
            get {
                return ResourceManager.GetString("RegexGrammar", resourceCulture);
            }
        }
    }
}
